<?php

namespace App\Http\Controllers;

use App\Category;
use Illuminate\Http\Request;
use App\ActivityLog;
use App\User;
use App\Task;

class ActivityLogController extends Controller
{
    /**
     * ðŸ”¹ Log kayÄ±tlarÄ±nÄ± listele (arama + sayfalama)
     */
    public function index(Request $request)
    {
        $query = ActivityLog::query()
            ->whereNull('deleted_at')
            ->filter($request); // kendi filter scopeâ€™un varsa burada Ã§alÄ±ÅŸÄ±r

        // ðŸ”¹ VarsayÄ±lan sÄ±ralama (sort parametresi yoksa)
        if (!$request->has('sort')) {
            $query->orderBy('updated_at', 'desc');
        }

        // ðŸ”¹ Sayfalama: her sayfada 10 kayÄ±t, mevcut query stringleri koru
        $activity = $query->paginate(10)->withQueryString();

        return view('activity.index', compact('activity'));
    }

    /**
     * ðŸ”¹ Yeni etkinlik formu
     */
    public function create()
    {
        $users = User::all();
        $tasks = Task::all();
        return view('activity.create', compact('users', 'tasks'));
    }

    /**
     * ðŸ”¹ Yeni etkinlik kaydÄ± oluÅŸtur
     */
    public function store(Request $request)
    {
        $request->validate([
            'user_id' => 'nullable|exists:users,id',
            'task_id' => 'nullable|exists:tasks,id',
            'action' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        ActivityLog::create([
            'user_id' => $request->user_id ?? auth()->id(),
            'task_id' => $request->task_id,
            'action' => $request->action,
            'description' => $request->description,
        ]);

        return redirect()->route('activity.index')->with('success', 'Etkinlik baÅŸarÄ±yla oluÅŸturuldu.');
    }

    /**
     * ðŸ”¹ Etkinlik dÃ¼zenleme formu
     */
    public function edit($id)
    {
        $log = ActivityLog::findOrFail($id);
        $users = User::all();
        $tasks = Task::all();
        return view('activity.edit', compact('log', 'users', 'tasks'));
    }

    /**
     * ðŸ”¹ Etkinlik gÃ¼ncelle
     */
    public function update(Request $request, $id)
    {
        $log = ActivityLog::findOrFail($id);

        $request->validate([
            'user_id' => 'nullable|exists:users,id',
            'task_id' => 'nullable|exists:tasks,id',
            'action' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $log->update([
            'user_id' => $request->user_id,
            'task_id' => $request->task_id,
            'action' => $request->action,
            'description' => $request->description,
        ]);

        return redirect()->route('activity.index')->with('success', 'Etkinlik baÅŸarÄ±yla gÃ¼ncellendi.');
    }

    /**
     * ðŸ”¹ EtkinliÄŸi soft delete ile sil
     */
    public function destroy($id)
    {
        $log = ActivityLog::findOrFail($id);
        $log->delete(); // Soft delete (deleted_at dolar)
        return redirect()->route('activity.index')->with('success', 'Etkinlik baÅŸarÄ±yla silindi.');
    }

    /**
     * ðŸ”¹ SilinmiÅŸ etkinlikleri listele
     */
    public function deleted()
    {
        $logs = ActivityLog::onlyTrashed()->with(['user', 'task'])->latest()->paginate(10);
        return view('activity.deleted', compact('logs'));
    }

    /**
     * ðŸ”¹ SilinmiÅŸ etkinliÄŸi geri getir
     */
    public function restore($id)
    {
        $log = ActivityLog::onlyTrashed()->findOrFail($id);
        $log->restore();
        return redirect()->route('activity.deleted')->with('success', 'Etkinlik geri getirildi.');
    }

    /**
     * ðŸ”¹ Tek bir log kaydÄ±nÄ± gÃ¶rÃ¼ntÃ¼le (detay sayfasÄ±)
     */
    public function show($id)
    {
        $log = ActivityLog::with(['user', 'task'])->findOrFail($id);
        return view('activity.show', compact('log'));
    }
}
